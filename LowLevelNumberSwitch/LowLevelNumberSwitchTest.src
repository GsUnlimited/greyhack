import_code("../TestFramework/TestFramework":"../TestFramework/TestFramework")
import_code("./LowLevelNumberSwitch":"./LowLevelNumberSwitch")
TestLowLevelNumberSwitch = new TestCase.construct("TestLowLevelNumberSwitch")
hexstring= new hexString.construct("0x00")
bitsstring = new BitsString.construct("010101")
TestLowLevelNumberSwitch.assertSame(hexstring.val,"0x00","test that the hexStringConstructor safes the value of 0x00 properly and is 0x00")
TestLowLevelNumberSwitch.assertNotSame(hexstring.val,1,"test that the hexStringConstructor safes the value of 0x00 properly and is not 1")
TestLowLevelNumberSwitch.assertNotSame(hexstring.val,"0x01","test that the hexStringConstructor safes the value of 0x00 properly and is not 0x01")
TestLowLevelNumberSwitch.assertSame(bitsstring.val,"010101","test that BitsString safes the value of 010101 properly and is 010101")
TestLowLevelNumberSwitch.assertNotSame(bitsstring.val,"0x00","test that BitsString safes the value of 010101 properly and is not 0x00")
TestLowLevelNumberSwitch.assertNotSame(bitsstring.val,1,"test that BitsString safes the value of 010101 properly and is not 1")
TestLowLevelNumberSwitch.assertSame(ToBitsInToBytes(255,2).val,"0000000011111111","test that ToBitsInToBytes(255,2) returns the right BitsString.val of the value of 0000000011111111")
TestLowLevelNumberSwitch.assertNotSame(ToBitsInToBytes(254,2).val,"0000000000001111","test that ToBitsInToBytes(254,2) not returns the BitsString.val of the value of 0000000000001111")
TestLowLevelNumberSwitch.assertNotSame(ToBitsInToBytes(254,3).val,"0000000000001111","test that ToBitsInToBytes(254,3) not returns the BitsString.val of the value of 0000000000001111")
TestLowLevelNumberSwitch.assertNotSame(ToBitsInToBytes(254,3),"00001111","test that ToBitsInToBytes(254,3) not returns the BitsString of the value of 0000000000001111")
TestLowLevelNumberSwitch.assertSame(Byte_NumToHex("00001111",1).val,"0x0f","test that Byte_NumToHex(00001111,1).val returns the right hexString.val of the value of 0x0f")
TestLowLevelNumberSwitch.assertSame(Byte_NumToHex("0000000000001111",2).val,"0x000f","test that Byte_NumToHex(0000000000001111,1).val returns the right hexString.val of the value of 0x000f")
TestLowLevelNumberSwitch.assertNotSame(Byte_NumToHex("00001111",1).val,"0x0c","test that Byte_NumToHex(00001111,1).val not returns the hexString.val of the value of 0x0c")
TestLowLevelNumberSwitch.assertNotSame(Byte_NumToHex("0000000000001111",2).val,"0x0c","test that Byte_NumToHex(0000000000001111,2).val not returns the hexString.val of the value of 0x0c")
TestLowLevelNumberSwitch.assertNotSame(Byte_NumToHex("0000000000001111",2),"0x0c","test that Byte_NumToHex(0000000000001111,2) not returns the hexString.val of the value of 0x0c")
a = ["1","1","1","1"]
b = ["1","1","1","0"]
c = ["1","0","1","0"]
TestLowLevelNumberSwitch.assertSame(nibleToDec(a),15,"test that nibleToDec() (1 and 0 as string) returns the same as 15")
TestLowLevelNumberSwitch.assertSame(nibleToDec(b),14,"test that nibleToDec([1,1,1,0]) (1 and 0 as string) returns the same as 14")
TestLowLevelNumberSwitch.assertNotSame(nibleToDec(c),14,"test that nibleToDec([1,0,1,0]) (1 and 0 as string) returns not the same as 14")
TestLowLevelNumberSwitch.assertNotSame(nibleToDec(b),"13","test that nibleToDec([1,1,1,0]) (1 and 0 as string) returns the same as 13 ")
TestLowLevelNumberSwitch.assertSame(HexToNible_No_ZEROX ("f"),"1111","test that HexToNible_No_ZEROX (f) returns the same as 1111 (1 and 0 as string)")
TestLowLevelNumberSwitch.assertSame(HexToNible_No_ZEROX ("e"),"1110","test that HexToNible_No_ZEROX (e) returns the same as 1110 (1 and 0 as string)")
TestLowLevelNumberSwitch.assertNotSame(HexToNible_No_ZEROX ("e"),"b","test that HexToNible_No_ZEROX (e) not returns the same as b (as string)")
TestLowLevelNumberSwitch.assertNotSame(HexToNible_No_ZEROX ("e"),c,"test that HexToNible_No_ZEROX (e) not returns the same as [1,0,1,0] (1 and 0 as string)")
TestLowLevelNumberSwitch.assertSame(HexToBinInBytes("0x001e",2).val,"0000000000011110","test that HexToBinInBytes(0x001e,2).val not returns the same as 0000000011111110 (as string)")










