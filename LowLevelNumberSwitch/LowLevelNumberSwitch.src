import_code("../Mathlib/Mathlib":"../Mathlib/Mathlib")
HexString = {}
HexString.construct = function(hexstring)
    if hexstring[0] != "0" then
        return exit("Provided Invalid HexString format. The Format is 0x(here the rest)")
    end if
    if hexstring[1] != "x" then
        return exit("Provided Invalid HexString format. The Format is 0x(here the rest)")
    end if
    self.val = hexstring
return self
end function
BitString = {}
BitString.construct = function(bitString)
    for char in bitString
        if not char == "0" or char == "1" then
            return exit("BitString contains other characters than 0 or 1. Only 0 or 1 digits are valid")
        end if
    end for
    self.val = bitString
return self
end function


hexmap = ["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"]

//dec->bit
DecToBinInBytes = function(numInDezimal,byteSize)
result = []
rest = numInDezimal
while true
    if rest == 0 then
        break 
    end if
    if rest == 1 then
        result.push(1)
        break
    end if
    bitsAsRest = rest % 2
    if bitsAsRest == 0 then
        rest = rest / 2
    end if 
    if bitsAsRest == 1 then
        rest = (rest - 1) / 2
    end if
    result.push(bitsAsRest)
end while
if result.len < byteSize * 8 then
while(result.len < byteSize * 8)
    result.push(0)
end while 
end if
result.reverse
result = result.join("")
result = new BitString.construct(result)
return result
end function

//bit->hex
BinToHexInBytes = function(BitNum,ByteNum)
BitNumInStr = str(BitNum)
if BitNumInStr.len > ByteNum * 8 then
    return exit("the provided BitNum is too high. Expected was a size of:"+ByteNum+" you provided a Bitnum of"+BitNum / 8 +".")
end if
if BitNumInStr.len < ByteNum * 8 then
    return exit("the provided BitNum is too low. Expected was a size of:"+ByteNum+" you provided a Bitnum of"+BitNum / 8 +".")
end if
BitInArray = BitNumInStr.split("")
i = 0
hexval = []
while ByteNum*2 != i 
    nible = slice(BitInArray,i*4,((i+1)*4))
    hexval.push(hexmap[nibleToDec(nible)])
    i = i+1
end while
hexval = hexval.join("")
hexval = "0x"+hexval+""
hexval = new HexString.construct(hexval)
return hexval
end function


nibleToDec = function(nibleArray)
value = 0
value = value + nibleArray[0].val * 8 
value = value + nibleArray[1].val * 4
value = value + nibleArray[2].val * 2 
value = value + nibleArray[3].val * 1
return value
end function


HexToNible_No_ZEROX = function(hexval)
    hexval = str(DecToBinInBytes(hexmap.indexOf(hexval),1).val)
    hexval = hexval.split("")
    hexval = slice(hexval,4,8)
    hexval = str(hexval.join(""))
    nibleVal = hexval
    return nibleVal
end function

//hex->bit
HexToBinInBytes = function(val,byteNum)
    val = new HexString.construct(val)
    val = val.val
    if val.len -2 != byteNum*2 then
        return exit("Your Hex-String is not the same lenght as your provided bytenum. The first two characters dont count")
    end if
    bitNum = ""
    val = slice(val,2,byteNum*8)
    for char in val
        bitNum= bitNum+ ""+str(HexToNible_No_ZEROX(char))+""
    end for
    return new BitString.construct(bitNum)
end function

//hex->dec
HexToDec = function(val)
    val = new HexString.construct(val).val
    val = slice(val,2,val.len)
    i = val.len
    dec = 0
    for char in val
        dec = dec + hexmap.indexOf(char) * pow(16,i-1)
        i = i-1
    end for   
return dec
end function

//bit->dec
BitToDecInBytes = function(bitsString,ByteNum)
if bitsString.len != ByteNum * 8 then
    return exit("The provided bitsString is not the same lenght as your provided ByteNum(ByteNum will be times 8 here)")
end if
bitsString = BitString.construct(bitsString).val
i = bitsString.len
dec = 0
for char in bitsString 
    dec = dec + char.val * pow(2,i-1)
    i = i-1
end for
    return dec
end function
//dec->hex
DecToHexIn8Bytes = function(decimal)
    if typeof(decimal) != "number" then
        return exit("decimal provided is not of type number")
    end if
    bitval = DecToBinInBytes(decimal,8).val
    result = BinToHexInBytes(bitval,8)
    return result
end function