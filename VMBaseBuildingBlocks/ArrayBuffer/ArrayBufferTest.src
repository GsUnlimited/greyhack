import_code("../../TestFramework/TestFramework.src":"../../TestFramework/TestFramework.src")
import_code("../ArrayBuffer/ArrayBuffer.src":"../ArrayBuffer/ArrayBuffer.src")
ByteNum = 65536
print(typeof(ByteNum))
beforeArrayBufferConstruct = time
a = new ArrayBuffer.construct(ByteNum)
afterArrayBufferConstruct = time
ArrayBufferTime = afterArrayBufferConstruct - beforeArrayBufferConstruct
print("time to construct an ArrayBuffer: "+ArrayBufferTime+"")
print()
TestArrayBuffer = new TestCase.construct("TestArrayBuffer")

aToBe = []
// test ArrayBuffer.construct and ArrayBuffer.getBuffer work (works in game but not in the interpreter for vscode)
i = 0
beforeDummyBuild = time
while i < ByteNum
    aToBe.push("00000000")
    i = i + 1
end while
afterDummyBuild = time
DummyTime = afterDummyBuild - beforeDummyBuild
print("time to construct the dummy: "+DummyTime+"")
print()
percentImprovement = DummyTime / ArrayBufferTime
print(percentImprovement)
TestArrayBuffer.assertSame(a._buffer,aToBe,"test that ArrayBuffer.construct("+ByteNum+") stores an array with lenght "+ByteNum+" and with 8 0s(string) as every value")
TestArrayBuffer.assertSame(a.getBuffer(),aToBe,"test that ArrayBuffer.construct("+ByteNum+") stores an array with lenght "+ByteNum+" and with 8 0s(string) as every value and can be fetched by getBuffer")
TestArrayBuffer.assertSame(a.getBuffer().len,ByteNum,"test that ArrayBuffer.construct("+ByteNum+") stores an array with lenght "+ByteNum+" and 8 0s(string) as every value")
//test ArrayBuffer.slice works (same bug here)
aToBe = a.slice(aToBe,0,ByteNum-1)
a = a.slice(0,ByteNum-1)
TestArrayBuffer.assertSame(a,aToBe,"test that a.slice (ArrayBuffer.slice) returns an array of length "+ByteNum-1+" if a = new ArrayBuffer.construct("+ByteNum+")")
//Error Testing cant happen because of the game 

print(time)


