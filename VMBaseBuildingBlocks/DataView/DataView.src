import_code("../ArrayBuffer/ArrayBuffer.src":"../ArrayBuffer/ArrayBuffer.src")
import_code("../DataTypes/DataTypes.src":"../DataTypes/DataTypes.src")
import_code("../../checkers/checkers.src":"../../checkers/checkers.src")


DataView = {}
DataView.className = "DataView"
DataView.construct = function(arrayBuffer)
    self._buffer = arrayBuffer
    return self
end function

DataView.getNestedBuffer = function()
    return self._buffer.getBuffer()
end function

DataView.getBuffer = function()
    return self._buffer
end function

DataView._getDataType = function(locationIndex,byteSize,dataType)
    print(dataType)
    typeCheckEqual(locationIndex,typeof(1),@exit,self.className+"DataView.getDataType : locationIndex has to be of type "+typeof(1)+". Provided was: "+typeof(locationIndex)+".")
    typeCheckEqual(byteSize,typeof(1),@exit,self.className+".getDataType : byteSize has to be of type "+typeof(1)+". Provided was: "+typeof(byteSize)+".")
    dataFormat = new dataType
    print(dataFormat)
    data = slice(self.getNestedBuffer(),locationIndex,locationIndex+byteSize)
    print(data)
    dataFormat.setBinaryVal(data)
    print(dataFormat)
    dataFormat.computeHexValFromBinaryVal()
    dataFormat.computeDecValFromBinaryVal()
    print(dataFormat)
    return dataFormat
end function

DataView._setDataType = function(locationIndex, byteSize, dataTypeObject)
    print(dataTypeObject)
    for i in range(0,byteSize)
        print(i)
        print(locationIndex+i)
        self.getNestedBuffer()[locationIndex+i] = dataTypeObject.getBinaryVal()[i]
        if i == byteSize-1 then
            break
        end if
    end for
end function

DataView.setUIntEight = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "UIntEight",@exit,self.className+".setUIntEight: valObject has to be of type UIntEight")
    self._setDataType(locationIndex,1,valObject)
end function

DataView.setIntEight = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "IntEight",@exit,self.className+".setIntEight: valObject has to be of type IntEight")
    self._setDataType(locationIndex,1,valObject)
end function

DataView.setUIntSixTeen = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "UIntSixTeen",@exit,self.className+".setUIntSixTeen: valObject has to be of type UIntSixTeen")
    self._setDataType(locationIndex,2,valObject)
end function

DataView.setIntSixTeen = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "IntSixTeen",@exit,self.className+".setUIntSixTeen: valObject has to be of type IntSixTeen")
    self._setDataType(locationIndex,2,valObject)
end function

DataView.setUIntThirtyTwo = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "UIntThirtyTwo",@exit,self.className+".setUIntThirtyTwo: valObject has to be of type UIntThirtyTwo")
    self._setDataType(locationIndex,4,valObject)
end function

DataView.setIntThirtyTwo = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "IntThirtyTwo",@exit,self.className+".setUIntThirtyTwo: valObject has to be of type IntThirtyTwo")
    self._setDataType(locationIndex,4,valObject)
end function

DataView.setUIntSixtyFour = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "UIntSixtyFour",@exit,self.className+".setUIntSixtyFour: valObject has to be of type UIntSixtyFour")
    self._setDataType(locationIndex,8,valObject)
end function

DataView.setIntSixtyFour = function(locationIndex,valObject)
    checkStrictEqual(valObject.className, "IntSixtyFour",@exit,self.className+".setIntSixtyFour: valObject has to be of type IntSixtyFour")
    self._setDataType(locationIndex,8,valObject)
end function

DataView.getIntSixtyFour = function(locationIndex)
    return self._getDataType(locationIndex,8, IntSixtyFour)
end function

DataView.getUIntSixtyFour = function(locationIndex)
    return self._getDataType(locationIndex,8, UIntSixtyFour)
end function

DataView.getUIntThirtyTwo = function(locationIndex)
    return self._getDataType(locationIndex,4, UIntThirtyTwo)
end function

DataView.getIntThirtyTwo = function(locationIndex)
    return self._getDataType(locationIndex,4, IntThirtyTwo)
end function

DataView.getIntEight = function(locationIndex)
    return self._getDataType(locationIndex,1,IntEight)
end function

DataView.getUIntEight = function(locationIndex)
    return self._getDataType(locationIndex,1,UIntEight)
end function

DataView.getUIntSixTeen = function(locationIndex)
    return self._getDataType(locationIndex,2,UIntSixTeen)
end function

DataView.getIntSixTeen = function(locationIndex)
    return self._getDataType(locationIndex,2,IntSixTeen)
end function

DataTypeWrapperBin = function(type,binVal)
    data = new type
    data.setBinaryVal(binVal)
    data.computeDecValFromBinaryVal()
    data.computeHexValFromBinaryVal()
    return data
end function

DataTypeWrapperDec = function(type,decVal)
    data = new type
    data.setDecVal(decVal)
    data.computeBinaryValFromDecVal()
    data.computeHexValFromBinaryVal()
    return data
end function

DataTypeWrapperHex = function(type,hexVal)
    data = new type
    data.setHexVal(hexVal)
    data.computeBinaryValFromHexVal()
    data.computeDecValFromBinaryVal()
    return data
end function





