import_code("../../TestFramework/TestFramework.src":"../../TestFramework/TestFramework.src")
import_code("./Datatypes.src":"./Datatypes.src")
TestDataTypes = new TestCase.construct("TestDataTypes")
testVal = new BaseNumericDataType.construct()
testVal.configureRules(1,2,1)
testVal.setDecVal(7)
testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["00000000","00000111"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")

testVal.setDecVal(-32768)
testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["10000000","00000000"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")
testVal.setBinaryVal(["10000000","00000000"])
testVal.computeDecValFromBinaryVal()
testVal.computeHexValFromBinaryVal()
TestDataTypes.assertSame(testVal.getDecVal(),-32768,"test that BaseNumericDataType evaluates the right number if an binaryValue is given(here -32768)")
TestDataTypes.assertSame(testVal.getHexVal(),"0x8000","test that BaseNumericDataType evaluates the right number if an binaryValue is given(here 0x8000)")

testVal.setDecVal(32767)
testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["01111111","11111111"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")

testVal.setDecVal(0)
testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["00000000","00000000"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")

testVal.setBinaryVal(["01111111","11111111"])
testVal.computeDecValFromBinaryVal()
testVal.computeHexValFromBinaryVal()
TestDataTypes.assertSame(testVal.getDecVal(),32767,"test that BaseNumericDataType evaluates the right number if an binaryValue is given(here 32767)")
TestDataTypes.assertSame(testVal.getHexVal(),"0x7fff","test that BaseNumericDataType evaluates the right number if an binaryValue is given(here 0x7fff)")

testVal = new BaseNumericDataType.construct()
testVal.configureRules(0,2,1)
testVal.setDecVal(7)

testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["00000000","00000111"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")
testVal.setDecVal(65535)

testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["11111111","11111111"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")

testVal.setDecVal(0)
testVal.computeBinaryValFromDecVal()
TestDataTypes.assertSame(testVal.getBinaryVal(),["00000000","00000000"],"assert that computeBinaryValFromDecVal works propely and returns the given binaryString")

testVal.setBinaryVal(["11111111","11111111"])
testVal.computeDecValFromBinaryVal()
testVal.computeHexValFromBinaryVal()
TestDataTypes.assertSame(testVal.getDecVal(),65535,"test that BaseNumericDataType evaluates the right number if an binaryValue is given(here 65535)")
TestDataTypes.assertSame(testVal.getHexVal(),"0xffff","test that BaseNumericDataType evaluates the right number if an binaryValue is given(here 0xffff)")
