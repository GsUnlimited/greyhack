import_code("../LowLevelNumberSwitch/LowLevelNumberSwitch.src":"../LowLevelNumberSwitch/LowLevelNumberSwitch.src")
import_code("../../checkers/checkers.src":"../../checkers/checkers.src")
import_code("../Mathlib/Mathlib.src":"../Mathlib/Mathlib.src")
BaseNumericDataType = {}
BaseNumericDataType.className = "BaseNumericDataType"
BaseNumericDataType.construct = function()
    self = new BaseNumericDataType
    self.decRules = {"NegativeAllowed":0,"Lowest":0,"Highest":0}
    self.hexRules={"WithZeroX":0,"Size":0}
    self.binaryRules={"Bytessize":0}
    self._decVal = 0
    self._hexVal = ""
    self._binaryVal = []
    return self
end function
BaseNumericDataType.configureRules = function(negativeAllowed,bytessize,withZeroX)
    typeCheckEqual(negativeAllowed,"number",@exit,self.className+".configureRules: negativeAllowed has to be of type number. Provided was: "+typeof(negativeAllowed)+"")
    typeCheckEqual(bytessize,"number",@exit,self.className+".configureRules: bytessize has to be of type number. Provided was: "+typeof(bytessize)+"")
    typeCheckEqual(withZeroX,"number",@exit,self.className+".configureRules: withZeroX has to be of type number. Provided was: "+typeof(withZeroX)+"")
    if negativeAllowed < 0 or negativeAllowed > 1 then
        exit(self.className+".configureRules: negativeAllowed has to be either 0(false) or 1 (true). Provided was:"+negativeAllowed+"")
    end if
    if withZeroX < 0 or withZeroX > 1 then
        exit(self.className+".configureRules: withZeroX has to be either 0(false) or 1 (true). Provided was: "+withZeroX+"")
    end if
    if bytessize < 0 then
        exit(self.className+".configureRules : bytessize has to be greater than 0. Provided was: "+bytessize+"")
    end if
    if bytessize > 8 then
        exit(self.className+".configureRules : bytessize has to be smaller than 8. There are no bigger possible DataTypes. Provided was: "+bytessize+"")
    end if
    self.decRules["NegativeAllowed"] = negativeAllowed
    self.binaryRules["Bytessize"] = bytessize
    self.hexRules["WithZeroX"] = withZeroX
    self._calculateRules()
end function

BaseNumericDataType._calculateRules = function()
    self.hexRules.Size = self.binaryRules.Bytessize * 2
    if self.decRules["NegativeAllowed"] == 0 then
        self.decRules["Highest"] = pow(2,self.binaryRules.Bytessize*8) -1
        self.decRules["Lowest"] = 0
        return
    else if self.decRules["NegativeAllowed"] == 1 then
        self.decRules.Highest = pow(2,self.binaryRules["Bytessize"]*8-1) 
        self.decRules.Lowest = pow(2,self.binaryRules["Bytessize"]*8) * -1
        return
    end if
        exit(self.className+"._calculateRules: self.decRules.NegativeAllowed has to be either 0(false) or 1 (true). Provided was: "+self.decRules["NegativeAllowed"]+"")
end function
BaseNumericDataType._validateDecVal = function(decVal)
    typeCheckEqual(decVal,"number",@exit,self.className+".setDecVal : decVal has to be of type number. Provided was :"+typeof(decVal)+".")
    if self.decRules["NegativeAllowed"] == 0 then
        self._checkNegativeDec(decVal)
        self._checkLowest(decVal)
        self._checkHighest(decVal)
    else if self.decRules["NegativeAllowed"] == 1 then
        self._checkLowest(decVal)
        self._checkHighest(decVal)
    else
        exit(self.className+".setDecVal : "+self.className+".decRules.NegativeAllowed has to be 0 or 1. Provided was :"+self.decRules.NegativeAllowed+".")
    end if
end function

BaseNumericDataType._checkNegativeDec = function(decVal)
    if decVal < 0 then
        exit(self.className+".checkNegativeDec: decVal has to be a postive. Provided was a value of: "+decVal+"")
    end if
end function

BaseNumericDataType._checkLowest = function(decVal)
    if decVal < self.decRules["Lowest"] then
        exit(self.className+".checkLowest: decVal has to be a minimum of "+self.decRules["Lowest"]+". Provided was a value of: "+decVal+"")
    end if
end function
BaseNumericDataType._checkHighest = function(decVal)
    if decVal > self.decRules["Highest"] then
        exit(self.className+".checkHighest: decVal has to a maximum of "+self.decRules["Highest"]+". Provided was a value of: "+decVal+"")
    end if
end function

BaseNumericDataType._validateBinaryVal = function(binaryVal)
    typeCheckEqual(binaryVal,"list",@exit,self.className+".validateBinaryVal: binaryVal has to be of type list. Provided was: "+typeof(binaryVal)+"")
    self._checkSize(binaryVal.len,self.binaryRules["Bytessize"],self.className+".validateBinaryVal: binaryVal has to have a lenght of"+self.binaryRules["Bytessize"]+". Provided was:"+binaryVal.len+"")
    for i in range(0,self.binaryRules["Bytessize"]-1)
        if binaryVal[i].len != 8 then
            exit(self.className+".validateBinaryVal: binaryVal["+i+"] has to be 8 characters long. Provided was "+binaryVal[i].len+"")
        end if
    end for
    return
end function

BaseNumericDataType._validateHexVal = function(hexVal)
    typeCheckEqual(hexVal,"string",@exit,self.className+"._validateHexVal: hexVal has to be of type string. Provided was:"+typeof(hexVal)+"")
    sizeBaseErrorMessage = self.className+"._validateHexVal: hexVal.len has to be equal to "+self.hexRules["Size"]+". Provided was: "
    if self.hexRules["WithZeroX"] == 1 then
        self._checkForZeroX(hexVal)
        self._checkSize(hexVal.len-2,self.hexRules["Size"],sizeBaseErrorMessage+hexVal.len-2," ")
    else if self.hexRules["WithZeroX"] == 0 then
        self._checkSize(hexVal,self.hexRules["Size"],sizeBaseErrorMessage+hexVal," ")
    end if
    return
end function

BaseNumericDataType._checkForZeroX = function(hexVal)
    hexVal = HexString.construct(hexVal).val
    return
end function
BaseNumericDataType._checkSize = function(toCheck,ToBe,message)
    checkStrictEqual(toCheck,ToBe,@exit,message)
    return
end function
BaseNumericDataType.setDecVal = function(decVal)
    self._validateDecVal(decVal)
    self._decVal = decVal
    return
end function


BaseNumericDataType.getDecVal = function()
    return self._decVal 
end function

BaseNumericDataType.setBinaryVal = function(binaryVal)
    self._validateBinaryVal(binaryVal)
    self._binaryVal= binaryVal
    return
end function


BaseNumericDataType.getBinaryVal = function()
    return self._binaryVal 
end function


BaseNumericDataType.setHexVal = function(hexVal)
    self._validateHexVal(hexVal)
    self._hexVal = hexVal
    return
end function


BaseNumericDataType.getHexVal = function()
    return self._hexVal 
end function
BaseNumericDataType._provideFullBinaryString = function()
    binaryVal = self.getBinaryVal()
    FullBinVal = ""
    for binVal in binaryVal
        FullBinVal = FullBinVal + binVal
    end for
    return FullBinVal
end function
BaseNumericDataType.computeDecValFromBinaryVal = function()
    FullBinVal = self._provideFullBinaryString
    if self.decRules["NegativeAllowed"] == 0 then
        deVal = BitToDecInBytes(FullBinVal,self.binaryRules["Bytessize"])
        self.setDecVal(deVal)
    else
        prefix = FullBinVal[0]
        if prefix == "1" then
            binVal = slice(FullBinVal,1,self.binaryRules["Bytessize"]*8)
            binVal = "0" + binVal
            decValWOPrefix = BitToDecInBytes(binVal,self.binaryRules["Bytessize"])
            if decValWOPrefix == 0 then
                self.setDecVal(pow(2,FullBinVal.len-1) * -1)
            end if
        else
            binVal = FullBinVal
            decValWOPrefix = BitToDecInBytes(binVal,self.binaryRules["Bytessize"])
            self.setDecVal(decValWOPrefix)
        end if
    end if
end function

BaseNumericDataType._binaryStringToBinaryArray = function(binaryString)
    binaryVal = []
    for i in range(0,(self.binaryRules["Bytessize"]-1))
        binaryVal.push(slice(binaryString,i*8,(i+1)*8))
    end for
    return binaryVal
end function
BaseNumericDataType.computeBinaryValFromDecVal = function()
    decVal = str(self.getDecVal())
    firstPlace = slice(decVal,0,1)
    if  firstPlace != "-" then
        binVal = DecToBinInBytes(decVal.val,self.binaryRules["Bytessize"])
        binVal = self._binaryStringToBinaryArray(binVal.val)
        self.setBinaryVal(binVal)
        return
    end if
    decVal = slice(decVal,1,decVal.len)
    if decVal == pow(2,self.binaryRules["Bytessize"]-1) then
        binVal = []
        for i in range(0,self.binaryRules["Bytessize"])
            binVal.push("11111111")
        end for
        return binVal
    end if
    binVal = DecToBinInBytes(decVal.val,self.binaryRules["Bytessize"])
    binVal = self._binaryStringToBinaryArray(binVal.val)
    switch = binVal[0]
    switch = "1"+slice(switch,1,8)
    binVal[0] = switch
    self.setBinaryVal(binVal)
    return
end function

    
BaseNumericDataType.computeHexValFromBinaryVal = function()
    binaryVal = self.getBinaryVal()
    FullBinVal = self._provideFullBinaryString()
    hexVal = BinToHexInBytes(FullBinVal,self.binaryRules["Bytessize"]).val
    if self.hexRules["WithZeroX"] == 0 then
        hexVal = slice(hexVal,2,self.hexRules["Size"])
    end if
    self.setHexVal(hexVal)
end function

BaseNumericDataType.computeBinaryValFromHexVal = function()
    hexVal = self.getHexVal()
    if self.hexRules["WithZeroX"] == 0 then
        hexVal = slice(hexVal,2,self.binaryRules["Bytessize"]*4)
        binVal = HexToBinInBytes(hexVal,self.binaryRules["Bytessize"])
        self.setBinaryVal(self._binaryStringToBinaryArray(binVal.val))
    else
        binVal = HexToBinInBytes(hexVal,self.binaryRules["Bytessize"])
        self.setBinaryVal(self._binaryStringToBinaryArray(binVal.val))
    end if
end function


UIntEight = new BaseNumericDataType.construct()
UIntEight.className = "UIntEight"
UIntEight.configureRules(0,1,1)

IntEight = new BaseNumericDataType.construct()
IntEight.className = "IntEight"
IntEight.configureRules(1,1,1)

UIntSixTeen = new BaseNumericDataType.construct()
UIntSixTeen.className = "UIntSixTeen"
UIntSixTeen.configureRules(0,2,1)

IntSixTeen = new BaseNumericDataType.construct()
IntSixTeen.className = "IntSixTeen"
IntSixTeen.configureRules(1,2,1)

UIntThirtyTwo = new BaseNumericDataType.construct()
UIntThirtyTwo.className = "UIntThirtyTwo"
UIntThirtyTwo.configureRules(0,4,1)

IntThirtyTwo = new BaseNumericDataType.construct()
UIntThirtyTwo.className = "IntThirtyTwo"
IntThirtyTwo.configureRules(1,4,1)
UIntSixtyFour = new BaseNumericDataType.construct()
UIntSixtyFour.className = "UIntSixtyFour"
UIntSixtyFour.configureRules(0,8,1)

IntSixtyFour = new BaseNumericDataType.construct()
IntSixtyFour.className = "IntSixtyFour"
IntSixtyFour.configureRules(1,8,1)