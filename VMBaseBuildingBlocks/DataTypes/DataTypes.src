import_code("../LowLevelNumberSwitch/LowLevelNumberSwitch.src":"../LowLevelNumberSwitch/LowLevelNumberSwitch.src")
UIntEight = {}
UIntEight.construct = function(arrayWithOneByte)
    if typeof(arrayWithOneByte) != "list" then
        return exit("arrayWithOneByte has to be of type list. Provided was: "+typeof(arrayWithOneByte)+".")
    end if
    if arrayWithOneByte.len != 1 then
        return exit("The provided array has to have a lenght of 1. Your had a length of: "+arrayWithOneByte.len+".")
    end if
    bitString = BitString.construct(arrayWithOneByte[0]).val
    if bitString.len != 8 then
        return exit("The provided lenght of the value in arrayWithOneByte[0] has to be 8. Yours had a lenght of"+bitString.len+"")
    end if
    dec = BitToDecInBytes(bitString,1)
    self.val = dec
    return self
end function
IntEight = {}
IntEight.construct = function(arrayWithOneByte)
    if typeof(arrayWithOneByte) != "list" then
        return exit("arrayWithOneByte has to be of type list. Provided was: "+typeof(arrayWithOneByte)+".")
    end if
    if arrayWithOneByte.len != 1 then
        return exit("The provided array has to have a lenght of 1. Your had a length of: "+arrayWithOneByte.len+".")
    end if
    binaryString = BitString.construct(arrayWithOneByte[0]).val
    if binaryString.len != 8 then
        return exit("The provided lenght of the value in arrayWithOneByte[0] has to be 8. Yours had a lenght of"+binaryString.len+"")
    end if 
    prefix = binaryString[0]
    binaryString = slice(binaryString,1,8)
    binaryString = "0" + binaryString
    decimalWithoutPrefix = BitToDecInBytes(binaryString,1)
    if prefix == "0" then
        self.val = decimalWithoutPrefix * 1
    else
        if prefix == "1" then
        self.val =  decimalWithoutPrefix * -1
        end if
    end if
    return self
end function

